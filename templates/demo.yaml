Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"  # Specify allowed Lambda function ARNs here, e.g., "arn:aws:lambda:<region>:<account-id>:function:<function-name>"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:::*"

  MyLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          def handler(event, context):
              return {
                  "statusCode": 200,
                  "body": json.dumps("Hello from Lambda!")
              }
      Runtime: "python3.9"
      Timeout: 15

 
  MyApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "MyApiGateway"
 
  MyApiGatewayResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: "hello"
      RestApiId: !Ref MyApiGateway
 
  MyApiGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      ResourceId: !Ref MyApiGatewayResource
      RestApiId: !Ref MyApiGateway
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
          - { LambdaArn: !GetAtt MyLambdaFunction.Arn }
 
  LambdaApiGatewayPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt MyLambdaFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*
 
  # MyVpc:
  #   Type: "AWS::EC2::VPC"
  #   Properties:
  #     CidrBlock: "10.0.0.0/16"
      
  MyDBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow access to PostgreSQL"
      VpcId: VPC_ID_PLACEHOLDER
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 5432
          ToPort: 5432
          CidrIp: "10.0.0.0/16"

  MyPostgresDB:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllocatedStorage: "20"
      DBInstanceClass: "db.t3.micro"
      Engine: "postgres"
      MasterUsername: "mydbuser"
      MasterUserPassword: "mydbpassword"
      DBName: "MyDatabase"
      # DBSubnetGroupName: !Ref MyDBSubnetGroup
      PubliclyAccessible: false
      BackupRetentionPeriod: 7
      VPCSecurityGroups:
        - !GetAtt MyDBSecurityGroup.GroupId

# Parameters:
#   VPCId:
#     Type: AWS::EC2::VPC::Id